
/**
 * Generated by https://github.com/dsheiko/puppetry
 * on Sat Jan 18 2020 18:42:02 GMT+1100 (Australian Eastern Daylight Time)
 * Suite: Add Delete Log Item
 */

var nVer = process.version.match( /^v(\d+)/ );
if ( !nVer || nVer[ 1 ] < 9 ) {
  console.error( "WARNING: You have an outdated Node.js version " + process.version
    + ". You need at least v.9.x to run this test suite." );
}


const {
        bs, util, fetch, localStorage
      } = require( "../lib/bootstrap" )( "Add--Delete--Log--Item" ),
      devices = require( "puppeteer/DeviceDescriptors" );



jest.setTimeout( 50000 );

let consoleLog = [], // assetConsoleMessage
    dialogLog = []; // assertDialog;

bs.TARGETS = {};

// Environment variables
const ENV = {

};

bs.TARGETS[ "BUTTON_CLASS_UI_OLIVE_HUGE_BUTTON" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/button[1]", false, "BUTTON_CLASS_UI_OLIVE_HUGE_BUTTON" );
bs.TARGETS[ "INPUT_ID_1_EMAIL" ] = async () => await bs.query( "#\\31 -email", true, "INPUT_ID_1_EMAIL" );
bs.TARGETS[ "INPUT_NAME_PASSWORD" ] = async () => await bs.query( "INPUT[name=\"password\"]", true, "INPUT_NAME_PASSWORD" );
bs.TARGETS[ "DIV" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/div[2]/div[2]/span[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[3]", false, "DIV" );
bs.TARGETS[ "SPAN_CLASS_AUTH0_LABEL_SUBMIT" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/button[1]/span[1]", false, "SPAN_CLASS_AUTH0_LABEL_SUBMIT" );
bs.TARGETS[ "INPUT" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/input[1]", false, "INPUT" );
bs.TARGETS[ "I_CLASS_ADD_ICON" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/button[1]/i[1]", false, "I_CLASS_ADD_ICON" );
bs.TARGETS[ "I_CLASS_DELETE_ICON" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[5]/button[1]/i[1]", false, "I_CLASS_DELETE_ICON" );

describe( "Add Delete Log Item", () => {
  beforeAll(async () => {
    await bs.setup({"incognito":false,"ignoreHTTPSErrors":false,"headless":false,"launcherArgs":"--start-maximized --disable-extensions-except=null --load-extension=null --disable-extensions-except=/home/andrew/dev/cloud-dev-capstone-motorcycle-log/client/puppetry_e2e_tests --load-extension=/home/andrew/dev/cloud-dev-capstone-motorcycle-log/client/puppetry_e2e_tests","devtools":false});

    bs.page.on( "console", ( message ) => consoleLog.push( message ) );
    bs.page.on( "dialog", ( dialog ) => dialogLog.push( dialog ) );

    
    

    
  });

  afterAll(async () => {

    await bs.teardown();
  });


  describe( "user gets logged in", () => {

    test( "log in {a8vk5j8xado}", async () => {
      let result, assert, searchStr;
      // SNIPPET Login: START
      util.startStep( "page.goto" );

      // Navigating to http://localhost:3000/
      bs.performance.reset();
      await bs.page.goto( "http://localhost:3000/", {"timeout":30000,"waitUntil":"domcontentloaded"} );
    
      util.endStep();

      util.startStep( "page.setViewport" );

      // Defining browser viewport
      await bs.page.setViewport({
        width: 1366,
        height: 675,
        deviceScaleFactor: undefined,
        isMobile: false,
        hasTouch: false,
        isLandscape: false
      });
  
      util.endStep();

      util.startStep( "BUTTON_CLASS_UI_OLIVE_HUGE_BUTTON.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/button[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "BUTTON_CLASS_UI_OLIVE_HUGE_BUTTON" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "page.waitForNavigation" );

      // Waiting for the given event
      try {
        await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
      } catch ( e ) {
        // if timeout, try to proceed anyways
      }
    
      util.endStep();

      util.startStep( "INPUT_ID_1_EMAIL.type" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#\\31 -email" );
      
      // Emulating user input
      await ( await bs.getTarget( "INPUT_ID_1_EMAIL" ) ).type( "andrew.d.wilkie@gmail.com" );
      util.endStep();

      util.startStep( "INPUT_NAME_PASSWORD.type" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "INPUT[name=\"password\"]" );
      
      // Emulating user input
      await ( await bs.getTarget( "INPUT_NAME_PASSWORD" ) ).type( {{ TEST_PASSWORD }} );
      util.endStep();

      util.startStep( "DIV.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/div[2]/div[2]/span[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[3]" );

      // Emulating mouse click
      await ( await bs.getTarget( "DIV" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "SPAN_CLASS_AUTH0_LABEL_SUBMIT.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/button[1]/span[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "SPAN_CLASS_AUTH0_LABEL_SUBMIT" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "page.waitForNavigation" );

      // Waiting for the given event
      try {
        await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
      } catch ( e ) {
        // if timeout, try to proceed anyways
      }
    
      util.endStep();

      // SNIPPET Login: END

    });

  });


  describe( "add log item", () => {

    test( "add log description {a8vk5ja0f93}", async () => {
      let result, assert, searchStr;
      util.startStep( "INPUT.type" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/input[1]" );
      
      // Emulating user input
      await ( await bs.getTarget( "INPUT" ) ).type( "Log item description" );
      util.endStep();

      util.startStep( "I_CLASS_ADD_ICON.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/button[1]/i[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "I_CLASS_ADD_ICON" ) ).click( {"button":"left"} );
      util.endStep();

    });

  });


  describe( "delete log item", () => {

    test( "delete {a8vk5ja789k}", async () => {
      let result, assert, searchStr;
      util.startStep( "I_CLASS_DELETE_ICON.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[5]/button[1]/i[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "I_CLASS_DELETE_ICON" ) ).click( {"button":"left"} );
      util.endStep();

    });

  });


});
