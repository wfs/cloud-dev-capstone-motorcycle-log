
/**
 * Generated by https://github.com/dsheiko/puppetry
 * on Mon Jan 27 2020 16:27:14 GMT+1100 (Australian Eastern Daylight Time)
 * Suite: add-with-image-then-delete-log-item
 */

var nVer = process.version.match( /^v(\d+)/ );
if ( !nVer || nVer[ 1 ] < 9 ) {
  console.error( "WARNING: You have an outdated Node.js version " + process.version
    + ". You need at least v.9.x to run this test suite." );
}


const {
        bs, util, fetch, localStorage
      } = require( "../lib/bootstrap" )( "add-with-image-then-delete-log-item" ),
      devices = require( "puppeteer/DeviceDescriptors" );



jest.setTimeout( 50000 );

let consoleLog = [], // assetConsoleMessage
    dialogLog = []; // assertDialog;

bs.TARGETS = {};

// Environment variables
const ENV = {
  "BASE_URL": "http://localhost:3000/",
  "TEST_PASSWORD": "Auth02020!",
  "TEST_USER_EMAIL": "andrew.d.wilkie@gmail.com"
};

bs.TARGETS[ "BUTTON_CLASS_UI_OLIVE_HUGE_BUTTON" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/button[1]", false, "BUTTON_CLASS_UI_OLIVE_HUGE_BUTTON" );
bs.TARGETS[ "INPUT_ID_1_EMAIL" ] = async () => await bs.query( "#\\31 -email", true, "INPUT_ID_1_EMAIL" );
bs.TARGETS[ "INPUT_NAME_PASSWORD" ] = async () => await bs.query( "INPUT[name=\"password\"]", true, "INPUT_NAME_PASSWORD" );
bs.TARGETS[ "DIV" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/div[2]/div[2]/span[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[3]", false, "DIV" );
bs.TARGETS[ "SPAN_CLASS_AUTH0_LABEL_SUBMIT" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/button[1]/span[1]", false, "SPAN_CLASS_AUTH0_LABEL_SUBMIT" );
bs.TARGETS[ "BUTTON_CLASS_UI_GREEN_ICON_BUTTON" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/button[1]", false, "BUTTON_CLASS_UI_GREEN_ICON_BUTTON" );
bs.TARGETS[ "CHOOSE_FILE_BUTTON" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/input[1]", false, "CHOOSE_FILE_BUTTON" );
bs.TARGETS[ "DIV_CLASS_ROW" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[3]", false, "DIV_CLASS_ROW" );
bs.TARGETS[ "EMAIL_ID" ] = async () => await bs.query( "#\\31 -email", true, "EMAIL_ID" );
bs.TARGETS[ "FILE_UPLOAD_BUTTON" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[3]/div[3]/button[1]/i[1]", false, "FILE_UPLOAD_BUTTON" );
bs.TARGETS[ "HOME_MENU_BUTTON" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/a[1]", false, "HOME_MENU_BUTTON" );
bs.TARGETS[ "LOGIN_BUTTON" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/button[1]", false, "LOGIN_BUTTON" );
bs.TARGETS[ "LOG_NAME" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/input[1]", false, "LOG_NAME" );
bs.TARGETS[ "LOG_OUT_MENU_BUTTON" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[3]/a[1]", false, "LOG_OUT_MENU_BUTTON" );
bs.TARGETS[ "PASSWORD" ] = async () => await bs.query( "INPUT[name=\"password\"]", true, "PASSWORD" );
bs.TARGETS[ "PLUS_BUTTON_ADD_LOG_NAME" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/button[1]/i[1]", false, "PLUS_BUTTON_ADD_LOG_NAME" );
bs.TARGETS[ "REAR_RACK_NAME_WITH_ANCHOR" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[3]/div[1]/a[1]", false, "REAR_RACK_NAME_WITH_ANCHOR" );
bs.TARGETS[ "TIMELINE_PAGE_MENU_BUTTON" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/a[1]", false, "TIMELINE_PAGE_MENU_BUTTON" );
bs.TARGETS[ "TIMELINE_PAGE_REAR_RACK_NAME" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/section[1]/div[2]/div[3]/div[1]/div[2]/div[2]/div[2]", false, "TIMELINE_PAGE_REAR_RACK_NAME" );
bs.TARGETS[ "TIMELINE_PAGE_REAR_RACK_UPLOADED_IMAGE" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/section[1]/div[2]/div[3]/div[1]/div[2]/div[3]/a[1]/div[1]", false, "TIMELINE_PAGE_REAR_RACK_UPLOADED_IMAGE" );
bs.TARGETS[ "UPLOAD_FILE_BUTTON" ] = async () => await bs.query( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[2]/button[1]", false, "UPLOAD_FILE_BUTTON" );

describe( "add-with-image-then-delete-log-item", () => {
  beforeAll(async () => {
    await bs.setup({"incognito":false,"ignoreHTTPSErrors":false,"headless":false,"launcherArgs":"--start-maximized","devtools":false});

    bs.page.on( "console", ( message ) => consoleLog.push( message ) );
    bs.page.on( "dialog", ( dialog ) => dialogLog.push( dialog ) );

    
    

    
  });

  afterAll(async () => {

    await bs.teardown();
  });


  describe( "Recorded session", () => {

    test( "Recorded test case {lfok5vzyaw7}", async () => {
      let result, assert, searchStr;
      util.startStep( "page.goto" );

      // Navigating to http://localhost:3000/
      bs.performance.reset();
      await bs.page.goto( "http://localhost:3000/", {"timeout":30000,"waitUntil":"domcontentloaded"} );
    
      util.endStep();

      util.startStep( "page.setViewport" );

      // Defining browser viewport
      await bs.page.setViewport({
        width: 1366,
        height: 675,
        deviceScaleFactor: undefined,
        isMobile: false,
        hasTouch: false,
        isLandscape: false
      });
  
      util.endStep();

      util.startStep( "LOGIN_BUTTON.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/button[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "LOGIN_BUTTON" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "page.waitForNavigation" );

      // Waiting for the given event
      try {
        await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
      } catch ( e ) {
        // if timeout, try to proceed anyways
      }
    
      util.endStep();

      util.startStep( "EMAIL_ID.type" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "#\\31 -email" );
      
      // Emulating user input
      await ( await bs.getTarget( "EMAIL_ID" ) ).type( "andrew.d.wilkie@gmail.com" );
      util.endStep();

      util.startStep( "PASSWORD.type" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForSelector( "INPUT[name=\"password\"]" );
      
      // Emulating user input
      await ( await bs.getTarget( "PASSWORD" ) ).type( "Auth02020!" );
      util.endStep();

      util.startStep( "SPAN_CLASS_AUTH0_LABEL_SUBMIT.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[1]/button[1]/span[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "SPAN_CLASS_AUTH0_LABEL_SUBMIT" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "page.waitForNavigation" );

      // Waiting for the given event
      try {
        await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
      } catch ( e ) {
        // if timeout, try to proceed anyways
      }
    
      util.endStep();

      util.startStep( "LOG_NAME.type" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/input[1]" );
      
      // Emulating user input
      await ( await bs.getTarget( "LOG_NAME" ) ).type( "Rear rack purchased and installed" );
      util.endStep();

      util.startStep( "PLUS_BUTTON_ADD_LOG_NAME.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/button[1]/i[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "PLUS_BUTTON_ADD_LOG_NAME" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "BUTTON_CLASS_UI_GREEN_ICON_BUTTON.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[1]/div[1]/div[1]/button[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "BUTTON_CLASS_UI_GREEN_ICON_BUTTON" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "page.setViewport" );

      // Defining browser viewport
      await bs.page.setViewport({
        width: 1366,
        height: 795,
        deviceScaleFactor: undefined,
        isMobile: false,
        hasTouch: false,
        isLandscape: false
      });
  
      util.endStep();

      util.startStep( "FILE_UPLOAD_BUTTON.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[3]/div[3]/button[1]/i[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "FILE_UPLOAD_BUTTON" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "CHOOSE_FILE_BUTTON.upload" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[1]/input[1]" );

      // Upload input[type=file]
      result = "C:\fakepath\gb-otr-t700-gep_ckbr_cke-rear-rack-topcase-tr_ger-yamaha-tenere-700-1.jpg";
      await ( await bs.getTarget( "CHOOSE_FILE_BUTTON" ) ).uploadFile( result );
      util.endStep();

      util.startStep( "UPLOAD_FILE_BUTTON.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/form[1]/div[2]/button[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "UPLOAD_FILE_BUTTON" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "HOME_MENU_BUTTON.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/a[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "HOME_MENU_BUTTON" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "page.screenshot" );

      // Taking screenshot of the page
      await bs.traceTarget( "lfok5w06vfh",
        {
          "BUTTON_CLASS_UI_GREEN_ICON_BUTTON": async () =>  await bs.getTargetOrFalse("BUTTON_CLASS_UI_GREEN_ICON_BUTTON"),
          "HOME_MENU_BUTTON": async () =>  await bs.getTargetOrFalse("HOME_MENU_BUTTON"),
          "LOG_NAME": async () =>  await bs.getTargetOrFalse("LOG_NAME"),
          "PLUS_BUTTON_ADD_LOG_NAME": async () =>  await bs.getTargetOrFalse("PLUS_BUTTON_ADD_LOG_NAME"),
          "REAR_RACK_NAME_WITH_ANCHOR": async () =>  await bs.getTargetOrFalse("REAR_RACK_NAME_WITH_ANCHOR"),
          "UPLOAD_FILE_BUTTON": async () =>  await bs.getTargetOrFalse("UPLOAD_FILE_BUTTON")
        },
        async() => {
          await bs.page.screenshot( util.png( "lfok5w06vfh", null, "Home Page", {"fullPage":true,"omitBackground":false} ) );
        });

      util.endStep();

      util.startStep( "DIV_CLASS_ROW.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/div[2]/div[3]" );

      // Emulating mouse click
      await ( await bs.getTarget( "DIV_CLASS_ROW" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "TIMELINE_PAGE_MENU_BUTTON.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[2]/a[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "TIMELINE_PAGE_MENU_BUTTON" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "page.screenshot" );

      // Taking screenshot of the page
      await bs.traceTarget( "lfok5w03w27",
        {
          "TIMELINE_PAGE_MENU_BUTTON": async () =>  await bs.getTargetOrFalse("TIMELINE_PAGE_MENU_BUTTON"),
          "TIMELINE_PAGE_REAR_RACK_NAME": async () =>  await bs.getTargetOrFalse("TIMELINE_PAGE_REAR_RACK_NAME"),
          "TIMELINE_PAGE_REAR_RACK_UPLOADED_IMAGE": async () =>  await bs.getTargetOrFalse("TIMELINE_PAGE_REAR_RACK_UPLOADED_IMAGE"),
          "LOG_OUT_MENU_BUTTON": async () =>  await bs.getTargetOrFalse("LOG_OUT_MENU_BUTTON")
        },
        async() => {
          await bs.page.screenshot( util.png( "lfok5w03w27", null, "Timeline Page", {"fullPage":true,"omitBackground":false} ) );
        });

      util.endStep();

      util.startStep( "LOG_OUT_MENU_BUTTON.click" );
      // Wait for CSS selector/Xpath to appear in page
      await bs.page.waitForXPath( "/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[3]/a[1]" );

      // Emulating mouse click
      await ( await bs.getTarget( "LOG_OUT_MENU_BUTTON" ) ).click( {"button":"left"} );
      util.endStep();

      util.startStep( "page.waitForNavigation" );

      // Waiting for the given event
      try {
        await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
      } catch ( e ) {
        // if timeout, try to proceed anyways
      }
    
      util.endStep();

      util.startStep( "page.screenshot" );

      // Taking screenshot of the page
      await bs.traceTarget( "lfok5w049w3",
        {
          "BUTTON_CLASS_UI_GREEN_ICON_BUTTON": async () =>  await bs.getTargetOrFalse("BUTTON_CLASS_UI_GREEN_ICON_BUTTON"),
          "HOME_MENU_BUTTON": async () =>  await bs.getTargetOrFalse("HOME_MENU_BUTTON"),
          "LOG_NAME": async () =>  await bs.getTargetOrFalse("LOG_NAME"),
          "PLUS_BUTTON_ADD_LOG_NAME": async () =>  await bs.getTargetOrFalse("PLUS_BUTTON_ADD_LOG_NAME"),
          "REAR_RACK_NAME_WITH_ANCHOR": async () =>  await bs.getTargetOrFalse("REAR_RACK_NAME_WITH_ANCHOR"),
          "UPLOAD_FILE_BUTTON": async () =>  await bs.getTargetOrFalse("UPLOAD_FILE_BUTTON")
        },
        async() => {
          await bs.page.screenshot( util.png( "lfok5w049w3", null, "Home Page", {"fullPage":true,"omitBackground":false} ) );
        });

      util.endStep();

    });

  });


});
